class Character(name)

# Test the "house party" pattern, in which we 
# lease out an object `owner` to create `lessee`
# and then share `lessee` to create `guest`.
#
# If there is a read through `owner`, does that
# need to cancel `lessee`? (Answer: no.)
#
# Same question for a read through `lessee` -- it does
# not need to cancel guest.

async fn main() {
    owner = Character("Achilles")
    lessee = owner.lease
    guest = lessee.share
    print(owner.name).await #! OUTPUT Achilles
    print(lessee.name).await #! OUTPUT Achilles
    print(guest.name).await #! OUTPUT Achilles

    owner.name := "Paris"
    print(guest.name).await #! RUN ERROR your lease to this object was cancelled
}