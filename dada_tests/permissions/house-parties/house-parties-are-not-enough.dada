# Test which shows that the "house party" rule,
# which permits the lessor to read a leased thing
# if that thing is subleased to a shared lease,
# isn't enough to truly capture the flexibility of
# Rust's shared borrows.

class Accumulator(my list)
class List()

# This function takes a `shleased` accumulator and returns a
# `shleased` result. (Though, if given an `our` accumulator,
# it will return an `our` list, given current rules.)
fn get_list(accumulator) # ->
{
    accumulator.list.share
}

async fn main() {
    # ```rust
    # let a = Accumulator::new(vec![]);
    # let l1 = get_list(&a);
    # let l2 = get_list(&a);
    # // works fine!
    # ```
    
    my a = Accumulator(list: List())
    l1 = get_list(a)
    l2 = get_list(a)
    print(l2).await #! OUTPUT List\(\)
    print(l1).await #! OUTPUT shleased List
    print(l2).await #! OUTPUT shleased List
}
